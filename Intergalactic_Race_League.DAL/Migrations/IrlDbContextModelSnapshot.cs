// <auto-generated />
using System;
using Intergalactic_Race_League.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Intergalactic_Race_League.DAL.Migrations
{
    [DbContext(typeof(IrlDbContext))]
    partial class IrlDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Intergalactic_Race_League.Models.Race", b =>
                {
                    b.Property<int>("RaceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RaceId"));

                    b.Property<string>("RaceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RacerOneID")
                        .HasColumnType("int");

                    b.Property<int>("RacerTwoId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<int>("TournamentId")
                        .HasColumnType("int");

                    b.Property<int?>("TournamentId1")
                        .HasColumnType("int");

                    b.Property<int>("WinnerId")
                        .HasColumnType("int");

                    b.HasKey("RaceId");

                    b.HasIndex("RacerOneID");

                    b.HasIndex("RacerTwoId");

                    b.HasIndex("TournamentId");

                    b.HasIndex("TournamentId1");

                    b.HasIndex("WinnerId");

                    b.ToTable("Races");
                });

            modelBuilder.Entity("Intergalactic_Race_League.Models.Racer", b =>
                {
                    b.Property<int>("RacerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RacerId"));

                    b.Property<int>("DriverAge")
                        .HasColumnType("int");

                    b.Property<string>("DriverCountry")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("DriverHeightInCm")
                        .HasColumnType("int");

                    b.Property<string>("DriverName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("RacerId");

                    b.ToTable("Racers");
                });

            modelBuilder.Entity("Intergalactic_Race_League.Models.RacerVehicle", b =>
                {
                    b.Property<int>("RacerVehicleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RacerVehicleId"));

                    b.Property<int>("RacerId")
                        .HasColumnType("int");

                    b.Property<int?>("TournamentId")
                        .HasColumnType("int");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.HasKey("RacerVehicleId");

                    b.HasIndex("RacerId")
                        .IsUnique();

                    b.HasIndex("TournamentId");

                    b.HasIndex("VehicleId")
                        .IsUnique();

                    b.ToTable("RacerVehicles");
                });

            modelBuilder.Entity("Intergalactic_Race_League.Models.Tournament", b =>
                {
                    b.Property<int>("TournamentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TournamentId"));

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TournamentId");

                    b.ToTable("Tournaments");
                });

            modelBuilder.Entity("Intergalactic_Race_League.Models.Vehicle", b =>
                {
                    b.Property<int>("VehicleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleId"));

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("VehicleId");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("Intergalactic_Race_League.Models.Race", b =>
                {
                    b.HasOne("Intergalactic_Race_League.Models.RacerVehicle", "RacerOne")
                        .WithMany()
                        .HasForeignKey("RacerOneID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Intergalactic_Race_League.Models.RacerVehicle", "RacerTwo")
                        .WithMany()
                        .HasForeignKey("RacerTwoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Intergalactic_Race_League.Models.Tournament", "Tournament")
                        .WithMany("AllRaces")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Intergalactic_Race_League.Models.Tournament", null)
                        .WithMany("RankedRaces")
                        .HasForeignKey("TournamentId1");

                    b.HasOne("Intergalactic_Race_League.Models.RacerVehicle", "Winner")
                        .WithMany()
                        .HasForeignKey("WinnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("RacerOne");

                    b.Navigation("RacerTwo");

                    b.Navigation("Tournament");

                    b.Navigation("Winner");
                });

            modelBuilder.Entity("Intergalactic_Race_League.Models.RacerVehicle", b =>
                {
                    b.HasOne("Intergalactic_Race_League.Models.Racer", "Racer")
                        .WithOne("RacerVehicle")
                        .HasForeignKey("Intergalactic_Race_League.Models.RacerVehicle", "RacerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Intergalactic_Race_League.Models.Tournament", null)
                        .WithMany("RacerVehicles")
                        .HasForeignKey("TournamentId");

                    b.HasOne("Intergalactic_Race_League.Models.Vehicle", "Vehicle")
                        .WithOne("RacerVehicle")
                        .HasForeignKey("Intergalactic_Race_League.Models.RacerVehicle", "VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Racer");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Intergalactic_Race_League.Models.Racer", b =>
                {
                    b.Navigation("RacerVehicle")
                        .IsRequired();
                });

            modelBuilder.Entity("Intergalactic_Race_League.Models.Tournament", b =>
                {
                    b.Navigation("AllRaces");

                    b.Navigation("RacerVehicles");

                    b.Navigation("RankedRaces");
                });

            modelBuilder.Entity("Intergalactic_Race_League.Models.Vehicle", b =>
                {
                    b.Navigation("RacerVehicle")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
